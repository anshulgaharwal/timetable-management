generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  password      String?
  role          String?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdPolls  Poll[]     @relation("PollCreator")
  responses     Response[] @relation("UserResponses")
  student       Student?
  taughtClasses TimetableEntry[] @relation("UserToTimetable")
}

model Poll {
  id            String     @id @default(cuid())
  title         String
  question      String
  description   String?
  category      String?
  isActive      Boolean    @default(true)
  expiresAt     DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdById   String
  allowMultiple Boolean    @default(false)
  batchId       Int?
  options       Option[]
  batch         Batch?     @relation(fields: [batchId], references: [id])
  creator       User       @relation("PollCreator", fields: [createdById], references: [id])
  responses     Response[]
}

model Option {
  id        String     @id @default(cuid())
  text      String
  imageUrl  String?
  position  Int        @default(0)
  pollId    String
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  responses Response[]
}

model Response {
  id        String   @id @default(cuid())
  pollId    String
  optionId  String
  userId    String
  createdAt DateTime @default(now())
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User     @relation("UserResponses", fields: [userId], references: [id])

  @@unique([pollId, userId, optionId])
}

model Batch {
  id         Int       @id @default(autoincrement())
  courseCode String
  startYear  Int
  endYear    Int
  course     Course    @relation(fields: [courseCode], references: [code])
  polls      Poll[]
  students   Student[]
  timetableEntries TimetableEntry[]
}

model Student {
  id      Int    @id @default(autoincrement())
  rollNo  Int
  batchId Int
  userId  String? @unique
  batch   Batch  @relation(fields: [batchId], references: [id])
  user    User?  @relation(fields: [userId], references: [id])
}

model Degree {
  code    String   @id
  name    String   @unique
  courses Course[]
}

model Course {
  code     String  @id
  name     String  @unique
  degreeId String
  batches  Batch[]
  degree   Degree  @relation(fields: [degreeId], references: [code])
  timetableEntries TimetableEntry[]
}

model TimetableEntry {
  id          String   @id @default(cuid())
  day         String   // e.g., "Monday"
  timeSlot    String   // e.g., "09:00-10:00"
  classroom   String

  courseCode  String
  course      Course   @relation(fields: [courseCode], references: [code])

  professorId String
  professor   User     @relation("UserToTimetable", fields: [professorId], references: [id])

  batchId     Int
  batch       Batch    @relation(fields: [batchId], references: [id])

  createdAt   DateTime @default(now())
}


